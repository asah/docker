#!/bin/bash

DBNAME=kyrix  # change to whatever you want

# Google GCP note: to run, you must first create a kubernetes cluster with plenty of RAM - we use n1-standard-2 (7.5GB)

NUM_WORKERS=`grep replicas worker-deployment.yaml | perl -ne 'm@: (\d+)@ && print "$1\n"'`
echo "$NUM_WORKERS workers found in worker-deployment.yaml"

echo "deleting existing deployment..."
kubectl delete deployment.apps/worker
kubectl delete deployment.apps/master
kubectl delete deployment.apps/manager
kubectl delete service/master
kubectl delete pvc/manager-claim0
kubectl delete service/bastion

while [ 1 ]; do w=`kubectl get -o name pods,deployments,services,pvc | grep -v kubernetes|wc -l`; if [ $w = 0 ]; then break; fi; echo "waiting for $w kubernetes resources (pods, etc) to shut down... "; sleep 3; done

echo "starting new deployment..."
kubectl create -f master-service.yaml
kubectl create -f manager-deployment.yaml
kubectl create -f manager-claim0-persistentvolumeclaim.yaml
kubectl create -f master-deployment.yaml
kubectl create -f worker-deployment.yaml

echo "waiting for new deployment to complete..."
while [ 1 ]; do w=`kubectl get pods | egrep -c 'worker.+Running'`; if [ $w = $NUM_WORKERS ]; then break; fi; echo "$w kubernetes containers running, waiting for $NUM_WORKERS... "; sleep 3   ; done
echo "all $NUM_WORKERS kubernetes containers running."

MASTER=`printf "%s\n" \`kubectl get pod -o jsonpath="{..metadata.name}"\`|grep master`
MANAGER=`printf "%s\n" \`kubectl get pod -o jsonpath="{..metadata.name}"\`|grep manager`
WORKERS=`printf "%s\n" \`kubectl get pod -o jsonpath="{..metadata.name}" \`|grep worker|xargs echo`
FIRST_WORKER=`printf "%s\n" \`kubectl get pod -o jsonpath="{..metadata.name}" \`|grep worker|head -1|xargs echo`
WORKER_IPS=`kubectl get pod -o wide | grep worker- | awk '{print $6}'`
RS_MASTER=`printf "%s\n" \`kubectl get replicasets -o jsonpath="{..metadata.name}"\`|grep master`

echo "exposing bastion early - it take minutes to allocate an external IP"
kubectl expose replicaset.apps/$RS_MASTER --type=LoadBalancer --name=bastion

echo "master=$MASTER, manager=$MANAGER, workers=$WORKERS; waiting for postgres startup"

echo "waiting for postgres startup..."
while [ 1 ]; do w=`for w in $WORKERS; do kubectl exec -it $w -- su - postgres -c "pg_isready"; done | grep accepting | wc -l`; if [ $w = $NUM_WORKERS ]; then break; fi; echo "$w kubernetes postgres servers running, waiting for $NUM_WORKERS... "; sleep 2; done

echo "waiting for postgres extension initialization startup (slow due to postgis)..."
while [ 1 ]; do w=`for w in $WORKERS; do kubectl exec -it $w -- su - postgres -c "psql -t -c \"select count(*) from pg_extension where extname = 'citus';\""; done | grep -c 1`; if [ $w = $NUM_WORKERS ]; then break; fi; echo "$w postgres servers initialized with citus, waiting for $NUM_WORKERS... "; sleep 2; done

for w in $WORKER_IPS; do kubectl exec -it $MASTER -- su - postgres -c "psql -t -c \"SELECT * from master_add_node('$w', 5432);\""; done|head

# setup user database
echo "setting up user database $DBNAME (slow because of create extension postgis)"
kubectl exec -it $MASTER -- su - postgres -c "psql -c \"create database $DBNAME;\" "
EXT_CMD='create extension if not exists citus; create extension if not exists postgis; create extension if not exists postgis_topology; create extension if not exists postgis_sfcgal; create extension if not exists fuzzystrmatch; create extension if not exists address_standardizer; create extension if not exists address_standardizer_data_us; create extension if not exists postgis_tiger_geocoder';
kubectl exec -it $MASTER -- su - postgres -c "psql $DBNAME -c \"$EXT_CMD\" "

for w in $WORKER_IPS; do kubectl exec -it $MASTER -- su - postgres -c "psql $DBNAME -t -c \"SELECT * from master_add_node('$w', 5432);\""|grep 5432; done
kubectl exec -it $MASTER -- su - postgres -c "psql -t -c \"select run_command_on_workers('create database $DBNAME');\" "
kubectl exec -it $MASTER -- su - postgres -c "psql $DBNAME -t -c \"select run_command_on_workers('$EXT_CMD');\" "

echo "waiting for postgres extension initialization startup (slow due to postgis)..."
while [ 1 ]; do w=`for w in $WORKERS; do kubectl exec -it $w -- su - postgres -c "psql $DBNAME -t -c \"select count(*) from pg_extension where extname like '%postgis%';\""; done | grep -c 4`; if [ $w = $NUM_WORKERS ]; then break; fi; echo "$w postgres servers initialized with postgis, waiting for $NUM_WORKERS... "; sleep 2; done


# test postgis on master
kubectl exec -it $MASTER -- su - postgres -c "psql $DBNAME -t -c \"SELECT num, street, city, state, zip FROM parse_address('1 Devonshire Place PH301, Boston, MA 02109');\""

# test citus
kubectl exec -it $MASTER -- su - postgres -c "psql $DBNAME" < citus-test.sql

echo "waiting for postgres extension initialization startup (slow due to postgis)..."
while [ 1 ]; do ip=`kubectl get service/bastion -o wide |grep bastion | awk '{print $4}'`; if [ $ip != '<pending>' ]; then break; fi; echo "waiting for external IP... "; sleep 2; done

BASTION_IP=$ip
echo "bastion live: run psql -h $BASTION_IP kyrix to connect (requires password)"
